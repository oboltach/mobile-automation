import Foundation
#if canImport(AppKit)
import AppKit
#endif
#if canImport(UIKit)
import UIKit
#endif
#if canImport(SwiftUI)
import SwiftUI
#endif
#if canImport(DeveloperToolsSupport)
import DeveloperToolsSupport
#endif

#if SWIFT_PACKAGE
private let resourceBundle = Foundation.Bundle.module
#else
private class ResourceBundleClass {}
private let resourceBundle = Foundation.Bundle(for: ResourceBundleClass.self)
#endif

// MARK: - Color Symbols -

@available(iOS 11.0, macOS 10.13, tvOS 11.0, *)
extension ColorResource {

    /// The "text_view_background" asset catalog color resource.
    static let textViewBackground = ColorResource(name: "text_view_background", bundle: resourceBundle)

    /// The "tinted_segmented_control" asset catalog color resource.
    static let tintedSegmentedControl = ColorResource(name: "tinted_segmented_control", bundle: resourceBundle)

    /// The "tinted_stepper_control" asset catalog color resource.
    static let tintedStepperControl = ColorResource(name: "tinted_stepper_control", bundle: resourceBundle)

}

// MARK: - Image Symbols -

@available(iOS 11.0, macOS 10.7, tvOS 11.0, *)
extension ImageResource {

    /// The "Flowers_1" asset catalog image resource.
    static let flowers1 = ImageResource(name: "Flowers_1", bundle: resourceBundle)

    /// The "Flowers_2" asset catalog image resource.
    static let flowers2 = ImageResource(name: "Flowers_2", bundle: resourceBundle)

    /// The "search_bar_background" asset catalog image resource.
    static let searchBarBackground = ImageResource(name: "search_bar_background", bundle: resourceBundle)

    /// The "slider_blue_track" asset catalog image resource.
    static let sliderBlueTrack = ImageResource(name: "slider_blue_track", bundle: resourceBundle)

    /// The "slider_green_track" asset catalog image resource.
    static let sliderGreenTrack = ImageResource(name: "slider_green_track", bundle: resourceBundle)

    /// The "stepper_and_segment_background" asset catalog image resource.
    static let stepperAndSegmentBackground = ImageResource(name: "stepper_and_segment_background", bundle: resourceBundle)

    /// The "stepper_and_segment_background_disabled" asset catalog image resource.
    static let stepperAndSegmentBackgroundDisabled = ImageResource(name: "stepper_and_segment_background_disabled", bundle: resourceBundle)

    /// The "stepper_and_segment_background_highlighted" asset catalog image resource.
    static let stepperAndSegmentBackgroundHighlighted = ImageResource(name: "stepper_and_segment_background_highlighted", bundle: resourceBundle)

    /// The "stepper_and_segment_segment_divider" asset catalog image resource.
    static let stepperAndSegmentSegmentDivider = ImageResource(name: "stepper_and_segment_segment_divider", bundle: resourceBundle)

    /// The "stepper_decrement" asset catalog image resource.
    static let stepperDecrement = ImageResource(name: "stepper_decrement", bundle: resourceBundle)

    /// The "stepper_increment" asset catalog image resource.
    static let stepperIncrement = ImageResource(name: "stepper_increment", bundle: resourceBundle)

    /// The "stepper_increment_disabled" asset catalog image resource.
    static let stepperIncrementDisabled = ImageResource(name: "stepper_increment_disabled", bundle: resourceBundle)

    /// The "stepper_increment_highlighted" asset catalog image resource.
    static let stepperIncrementHighlighted = ImageResource(name: "stepper_increment_highlighted", bundle: resourceBundle)

    /// The "text_field_background" asset catalog image resource.
    static let textFieldBackground = ImageResource(name: "text_field_background", bundle: resourceBundle)

    /// The "text_field_purple_right_view" asset catalog image resource.
    static let textFieldPurpleRightView = ImageResource(name: "text_field_purple_right_view", bundle: resourceBundle)

    /// The "text_view_attachment" asset catalog image resource.
    static let textViewAttachment = ImageResource(name: "text_view_attachment", bundle: resourceBundle)

    /// The "toolbar_background" asset catalog image resource.
    static let toolbarBackground = ImageResource(name: "toolbar_background", bundle: resourceBundle)

    /// The "x_icon" asset catalog image resource.
    static let xIcon = ImageResource(name: "x_icon", bundle: resourceBundle)

}

// MARK: - Backwards Deployment Support -

/// A color resource.
struct ColorResource: Swift.Hashable, Swift.Sendable {

    /// An asset catalog color resource name.
    fileprivate let name: Swift.String

    /// An asset catalog color resource bundle.
    fileprivate let bundle: Foundation.Bundle

    /// Initialize a `ColorResource` with `name` and `bundle`.
    init(name: Swift.String, bundle: Foundation.Bundle) {
        self.name = name
        self.bundle = bundle
    }

}

/// An image resource.
struct ImageResource: Swift.Hashable, Swift.Sendable {

    /// An asset catalog image resource name.
    fileprivate let name: Swift.String

    /// An asset catalog image resource bundle.
    fileprivate let bundle: Foundation.Bundle

    /// Initialize an `ImageResource` with `name` and `bundle`.
    init(name: Swift.String, bundle: Foundation.Bundle) {
        self.name = name
        self.bundle = bundle
    }

}

#if canImport(AppKit)
@available(macOS 10.13, *)
@available(macCatalyst, unavailable)
extension AppKit.NSColor {

    /// Initialize a `NSColor` with a color resource.
    convenience init(resource: ColorResource) {
        self.init(named: NSColor.Name(resource.name), bundle: resource.bundle)!
    }

}

protocol _ACResourceInitProtocol {}
extension AppKit.NSImage: _ACResourceInitProtocol {}

@available(macOS 10.7, *)
@available(macCatalyst, unavailable)
extension _ACResourceInitProtocol {

    /// Initialize a `NSImage` with an image resource.
    init(resource: ImageResource) {
        self = resource.bundle.image(forResource: NSImage.Name(resource.name))! as! Self
    }

}
#endif

#if canImport(UIKit)
@available(iOS 11.0, tvOS 11.0, *)
@available(watchOS, unavailable)
extension UIKit.UIColor {

    /// Initialize a `UIColor` with a color resource.
    convenience init(resource: ColorResource) {
#if !os(watchOS)
        self.init(named: resource.name, in: resource.bundle, compatibleWith: nil)!
#else
        self.init()
#endif
    }

}

@available(iOS 11.0, tvOS 11.0, *)
@available(watchOS, unavailable)
extension UIKit.UIImage {

    /// Initialize a `UIImage` with an image resource.
    convenience init(resource: ImageResource) {
#if !os(watchOS)
        self.init(named: resource.name, in: resource.bundle, compatibleWith: nil)!
#else
        self.init()
#endif
    }

}
#endif

#if canImport(SwiftUI)
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Color {

    /// Initialize a `Color` with a color resource.
    init(_ resource: ColorResource) {
        self.init(resource.name, bundle: resource.bundle)
    }

}

@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image {

    /// Initialize an `Image` with an image resource.
    init(_ resource: ImageResource) {
        self.init(resource.name, bundle: resource.bundle)
    }

}
#endif
import type { IDoctorCheck, AppiumLogger, DoctorCheckResult } from '@appium/types';
import '@colors/colors';
export declare class XcodeCheck implements IDoctorCheck {
    log: AppiumLogger;
    diagnose(): Promise<DoctorCheckResult>;
    fix(): Promise<string>;
    hasAutofix(): boolean;
    isOptional(): boolean;
}
export declare const xcodeCheck: XcodeCheck;
export declare class XcodeToolsCheck implements IDoctorCheck {
    log: AppiumLogger;
    diagnose(): Promise<DoctorCheckResult>;
    fix(): Promise<string>;
    hasAutofix(): boolean;
    isOptional(): boolean;
}
export declare const xcodeToolsCheck: XcodeToolsCheck;
declare class EnvVarAndPathCheck implements IDoctorCheck {
    private readonly varName;
    private readonly opts;
    log: AppiumLogger;
    static readonly ENVIRONMENT_VARS_TUTORIAL_URL = "https://github.com/appium/java-client/blob/master/docs/environment.md";
    constructor(varName: string, opts?: EnvVarCheckOptions);
    diagnose(): Promise<DoctorCheckResult>;
    fix(): Promise<string>;
    hasAutofix(): boolean;
    isOptional(): boolean;
}
export declare const homeEnvVarCheck: EnvVarAndPathCheck;
export interface EnvVarCheckOptions {
    /**
     * If set to true then the path is expected to be a valid folder
     */
    expectDir?: boolean;
    /**
     * If set to true then the path is expected to be a valid file
     */
    expectFile?: boolean;
}
export {};
//# sourceMappingURL=required-checks.d.ts.map
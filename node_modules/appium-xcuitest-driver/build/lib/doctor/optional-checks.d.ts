import type { IDoctorCheck, AppiumLogger, DoctorCheckResult } from '@appium/types';
import '@colors/colors';
export declare class OptionalIdbCommandCheck implements IDoctorCheck {
    log: AppiumLogger;
    static readonly IDB_README_URL = "https://git.io/JnxQc";
    diagnose(): Promise<DoctorCheckResult>;
    fix(): Promise<string>;
    hasAutofix(): boolean;
    isOptional(): boolean;
}
export declare const optionalIdbCheck: OptionalIdbCommandCheck;
export declare class OptionalSimulatorCheck implements IDoctorCheck {
    log: AppiumLogger;
    static readonly SUPPORTED_SIMULATOR_PLATFORMS: SimulatorPlatform[];
    diagnose(): Promise<DoctorCheckResult>;
    fix(): Promise<string>;
    hasAutofix(): boolean;
    isOptional(): boolean;
    private _listInstalledSdks;
}
export declare const optionalSimulatorCheck: OptionalSimulatorCheck;
export declare class OptionalApplesimutilsCommandCheck implements IDoctorCheck {
    log: AppiumLogger;
    static readonly README_LINK = "https://github.com/appium/appium-xcuitest-driver/blob/master/docs/reference/execute-methods.md#mobile-setpermission";
    diagnose(): Promise<DoctorCheckResult>;
    fix(): Promise<string>;
    hasAutofix(): boolean;
    isOptional(): boolean;
}
export declare const optionalApplesimutilsCheck: OptionalApplesimutilsCommandCheck;
export declare class OptionalFfmpegCheck implements IDoctorCheck {
    log: AppiumLogger;
    static readonly FFMPEG_BINARY = "ffmpeg";
    static readonly FFMPEG_INSTALL_LINK = "https://www.ffmpeg.org/download.html";
    diagnose(): Promise<DoctorCheckResult>;
    fix(): Promise<string>;
    hasAutofix(): boolean;
    isOptional(): boolean;
}
export declare const optionalFfmpegCheck: OptionalFfmpegCheck;
interface SimulatorPlatform {
    displayName: string;
    name: string;
}
export {};
//# sourceMappingURL=optional-checks.d.ts.map
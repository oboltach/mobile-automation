import {} from '../../../lib/types.js';
import { ServiceConnection } from '../../../service-connection.js';
import { BaseService } from '../base-service.js';
var InterfaceOrientation;
(function (InterfaceOrientation) {
    InterfaceOrientation[InterfaceOrientation["PORTRAIT"] = 1] = "PORTRAIT";
    InterfaceOrientation[InterfaceOrientation["PORTRAIT_UPSIDE_DOWN"] = 2] = "PORTRAIT_UPSIDE_DOWN";
    InterfaceOrientation[InterfaceOrientation["LANDSCAPE"] = 3] = "LANDSCAPE";
    InterfaceOrientation[InterfaceOrientation["LANDSCAPE_HOME_TO_LEFT"] = 4] = "LANDSCAPE_HOME_TO_LEFT";
})(InterfaceOrientation || (InterfaceOrientation = {}));
class SpringBoardService extends BaseService {
    static RSD_SERVICE_NAME = 'com.apple.springboardservices.shim.remote';
    _conn = null;
    constructor(address) {
        super(address);
    }
    async getIconState() {
        try {
            const req = {
                command: 'getIconState',
                formatVersion: '2',
            };
            return await this.sendRequestAndReceive(req);
        }
        catch (error) {
            if (error instanceof Error) {
                throw new Error(`Failed to get Icon state: ${error.message}`);
            }
            throw error;
        }
    }
    /**
     * TODO: This does not work currently due to a bug in Apple protocol implementation (maybe?)
     * Uncomment tests when it is fixed
     */
    async setIconState(newState = []) {
        try {
            const req = {
                command: 'setIconState',
                iconState: newState,
            };
            await this.sendRequestAndReceive(req);
        }
        catch (error) {
            if (error instanceof Error) {
                throw new Error(`Failed to set icon state: ${error.message}`);
            }
            throw error;
        }
    }
    async getIconPNGData(bundleID) {
        try {
            const req = {
                command: 'getIconPNGData',
                bundleId: bundleID,
            };
            const res = await this.sendRequestAndReceive(req);
            return res.pngData;
        }
        catch (error) {
            if (error instanceof Error) {
                throw new Error(`Failed to get Icon PNG data: ${error.message}`);
            }
            throw error;
        }
    }
    /**
     * TODO: This does not work currently due to a bug in Apple protocol implementation
     * Add tests when it is fixed
     */
    async getWallpaperInfo(wallpaperName) {
        try {
            const req = {
                command: 'getWallpaperInfo',
                wallpaperName,
            };
            return await this.sendRequestAndReceive(req);
        }
        catch (error) {
            if (error instanceof Error) {
                throw new Error(`Failed to get wallpaper info: ${error.message}`);
            }
            throw error;
        }
    }
    async getWallpaperPreviewImage(wallpaperName) {
        try {
            const req = {
                command: 'getWallpaperPreviewImage',
                wallpaperName,
            };
            const res = await this.sendRequestAndReceive(req);
            return res.pngData;
        }
        catch (error) {
            if (error instanceof Error) {
                throw new Error(`Failed to get wallpaper preview image: ${error.message}`);
            }
            throw error;
        }
    }
    async getHomescreenIconMetrics() {
        try {
            const req = {
                command: 'getHomeScreenIconMetrics',
            };
            return await this.sendRequestAndReceive(req);
        }
        catch (error) {
            if (error instanceof Error) {
                throw new Error(`Failed to get homescreen icon metrics: ${error.message}`);
            }
            throw error;
        }
    }
    async getInterfaceOrientation() {
        try {
            const req = {
                command: 'getInterfaceOrientation',
            };
            const res = await this.sendRequestAndReceive(req);
            return res.interfaceOrientation;
        }
        catch (error) {
            if (error instanceof Error) {
                throw new Error(`Failed to get interface orientation: ${error.message}`);
            }
            throw error;
        }
    }
    /**
     * TODO: This does not work currently due to a bug in Apple protocol implementation
     * Add tests when it is fixed
     */
    async getWallpaperPNGData(wallpaperName) {
        try {
            const req = {
                command: 'getHomeScreenWallpaperPNGData',
                wallpaperName,
            };
            const res = await this.sendRequestAndReceive(req);
            return res.pngData;
        }
        catch (error) {
            if (error instanceof Error) {
                throw new Error(`Failed to get wallpaper PNG data: ${error.message}`);
            }
            throw error;
        }
    }
    async connectToSpringboardService() {
        if (this._conn) {
            return this._conn;
        }
        const service = this.getServiceConfig();
        this._conn = await this.startLockdownService(service);
        return this._conn;
    }
    async sendRequestAndReceive(request) {
        if (!this._conn) {
            this._conn = await this.connectToSpringboardService();
        }
        // Skip StartService response
        await this._conn.sendAndReceive(request);
        return await this._conn.sendPlistRequest(request);
    }
    getServiceConfig() {
        return {
            serviceName: SpringBoardService.RSD_SERVICE_NAME,
            port: this.address[1].toString(),
        };
    }
}
export { SpringBoardService, InterfaceOrientation };

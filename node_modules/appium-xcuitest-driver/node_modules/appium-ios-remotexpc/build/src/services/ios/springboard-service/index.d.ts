import { type PlistDictionary, type SpringboardService as SpringboardInterface } from '../../../lib/types.js';
import { ServiceConnection } from '../../../service-connection.js';
import { BaseService } from '../base-service.js';
declare enum InterfaceOrientation {
    PORTRAIT = 1,// 0 degrees (default)
    PORTRAIT_UPSIDE_DOWN = 2,// 180 degrees
    LANDSCAPE = 3,// 90 degrees clockwise
    LANDSCAPE_HOME_TO_LEFT = 4
}
declare class SpringBoardService extends BaseService implements SpringboardInterface {
    static readonly RSD_SERVICE_NAME = "com.apple.springboardservices.shim.remote";
    private _conn;
    constructor(address: [string, number]);
    getIconState(): Promise<PlistDictionary>;
    /**
     * TODO: This does not work currently due to a bug in Apple protocol implementation (maybe?)
     * Uncomment tests when it is fixed
     */
    setIconState(newState?: PlistDictionary[]): Promise<void>;
    getIconPNGData(bundleID: string): Promise<Buffer>;
    /**
     * TODO: This does not work currently due to a bug in Apple protocol implementation
     * Add tests when it is fixed
     */
    getWallpaperInfo(wallpaperName: string): Promise<PlistDictionary>;
    getWallpaperPreviewImage(wallpaperName: 'homescreen' | 'lockscreen'): Promise<Buffer>;
    getHomescreenIconMetrics(): Promise<PlistDictionary>;
    getInterfaceOrientation(): Promise<InterfaceOrientation>;
    /**
     * TODO: This does not work currently due to a bug in Apple protocol implementation
     * Add tests when it is fixed
     */
    getWallpaperPNGData(wallpaperName: string): Promise<Buffer>;
    connectToSpringboardService(): Promise<ServiceConnection>;
    private sendRequestAndReceive;
    private getServiceConfig;
}
export { SpringBoardService, InterfaceOrientation };
//# sourceMappingURL=index.d.ts.map
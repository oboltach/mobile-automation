name: Mobile Automation CI (Self-Hosted iOS 18)

on:
  pull_request:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IOS_DEVICE: "iPhone 16 Pro"
  IOS_DEVICE_2: "iPhone 16 Plus"
  IOS_VERSION: "18"
  IOS_APP: "./apps/UIKitCatalog-iphonesimulator.app"
  NODE_OPTIONS: "--max-old-space-size=4096"
  MAX_INSTANCES: "2"
  WDA_PORT_1: "8100"
  WDA_PORT_2: "8101"
  WK_PROXY_PORT_1: "27753"
  WK_PROXY_PORT_2: "27754"

jobs:
  ios-tests:
    name: iOS • WDIO + Appium + Allure (Self-Hosted)
    runs-on: [self-hosted, macOS, Xcode16, iOS18]
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode
        shell: bash
        run: |
          set -euo pipefail
          sudo xcode-select -s "/Applications/Xcode.app/Contents/Developer"
          xcodebuild -version
          echo "DEVELOPER_DIR=/Applications/Xcode.app/Contents/Developer" >> "$GITHUB_ENV"

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Boot Simulators (NO ENV WRITE HERE)
        id: boot
        shell: bash
        run: |
          set -euo pipefail

          # Detect iOS Runtime
          RUNTIME_ID=$(xcrun simctl list runtimes | awk '/iOS 18/ && $0 !~ /unavailable/ {gsub(/[()]/,""); print $NF}' | head -n1)
          if [[ -z "$RUNTIME_ID" ]]; then
            echo "❌ No iOS 18 runtime"
            exit 1
          fi

          # Resolve Device Types
          resolve() { xcrun simctl list devicetypes | grep -m1 -F "$1" | sed -n 's/.*(\(com.apple.*\)).*/\1/p'; }
          TYPE1=$(resolve "$IOS_DEVICE")
          TYPE2=$(resolve "$IOS_DEVICE_2")

          # Create and Boot
          create_boot() {
            out=$(xcrun simctl create "$1" "$2" "$RUNTIME_ID" 2>&1 || true)
            udid=$(echo "$out" | grep -Eo '[0-9A-F-]{36}' | head -n1)
            xcrun simctl boot "$udid" || true
            xcrun simctl bootstatus "$udid" -b
            echo "$udid"
          }

          UDID1=$(create_boot "CI-DEVICE-1" "$TYPE1")
          UDID2=$(create_boot "CI-DEVICE-2" "$TYPE2")

          # Store in temp file, NOT in ENV
          echo "UDID1=$UDID1" > udids.txt
          echo "UDID2=$UDID2" >> udids.txt

      - name: Export UDIDs to ENV (SAFE STEP)
        shell: bash
        run: |
          set -euo pipefail
          source udids.txt
          echo "IOS_UDID=$UDID1" >> "$GITHUB_ENV"
          echo "IOS_UDID_2=$UDID2" >> "$GITHUB_ENV"

      - name: Run WDIO Tests
        run: npm run test:ios:ci

      - name: Generate Allure HTML
        if: always()
        run: npm run allure:generate

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ github.run_id }}
          path: allure-results

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ github.run_id }}
          path: allure-report

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ github.run_id }}
          path: |
            logs
            artifacts

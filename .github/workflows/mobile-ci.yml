name: Mobile Automation CI

on:
  pull_request:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Target exact names that exist on Xcode 16:
  IOS_DEVICE: "iPhone 16 Pro"
  IOS_DEVICE_2: "iPhone 16 Plus"
  IOS_VERSION: "18"                       # will fall back to latest iOS if 18.x not present
  IOS_APP: "./apps/UIKitCatalog-iphonesimulator.app"
  NODE_OPTIONS: "--max-old-space-size=4096"
  MAX_INSTANCES: "2"                      # WDIO global; run both caps concurrently
  # Distinct per-device ports (match your wdio.conf.js usage)
  WDA_PORT_1: "8100"
  WDA_PORT_2: "8101"
  WK_PROXY_PORT_1: "27753"
  WK_PROXY_PORT_2: "27754"

jobs:
  ios-tests:
    name: iOS • WDIO + Appium + Allure (2 sims)
    runs-on: macos-15
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Ensure iOS 18 runtimes
      - name: Select Xcode 16.1
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'

      # IMPORTANT: make the selected Xcode active for xcrun/simctl and init components
      - name: Verify Xcode & install components
        shell: bash
        run: |
          set -euo pipefail
          echo "DEVELOPER_DIR=$DEVELOPER_DIR"
          sudo xcode-select -s "$DEVELOPER_DIR"
          xcodebuild -version
          sudo xcodebuild -runFirstLaunch || true

          echo "== RUNTIMES AFTER SELECTION =="
          xcrun simctl list runtimes || true

          # Fallback scan if the image has multiple Xcodes and no iOS runtimes found yet
          if ! xcrun simctl list runtimes | grep -qi "iOS"; then
            echo "No iOS runtimes detected via current DEVELOPER_DIR. Scanning /Applications…"
            for X in /Applications/Xcode_*.app; do
              echo "Trying $X"
              sudo xcode-select -s "$X/Contents/Developer"
              xcodebuild -version
              sudo xcodebuild -runFirstLaunch || true
              if xcrun simctl list runtimes | grep -qi "iOS"; then
                echo "✅ Found iOS runtimes under $X"
                break
              fi
            done
          fi

      - name: Use Node.js 20 (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Show Xcode & available simulators
        run: |
          xcodebuild -version
          xcrun simctl list devicetypes
          xcrun simctl list runtimes
          xcrun simctl list devices available

      - name: Boot 2 Simulators ($IOS_DEVICE / $IOS_DEVICE_2 @ $IOS_VERSION)
        shell: bash
        run: |
          set -euo pipefail

          pick_runtime () {
            local desired="$1"
            local rid
            rid=$(xcrun simctl list runtimes | awk -v v="$desired" '
              /iOS/ && /Available|available/ && $0 ~ v { gsub(/[()]/,""); print $NF; exit }')
            if [[ -z "${rid:-}" ]]; then
              rid=$(xcrun simctl list runtimes | awk '
                /iOS/ && /Available|available/ { gsub(/[()]/,""); print $NF }' | tail -n1)
            fi
            echo "$rid"
          }

          resolve_type () {
            local name="$1"
            local tid
            # exact match by visible name (left side before '(')
            tid=$(xcrun simctl list devicetypes | awk -F '[()]' -v n="$name" '$1 ~ ("^" n "$") {print $2; exit}')
            echo "$tid"
          }

          create_and_boot () {
            local dev_name="$1"
            local runtime_id="$2"
            local idx="$3"

            echo "==> Resolving type for '${dev_name}'"
            local type_id
            type_id=$(resolve_type "$dev_name")
            if [[ -z "${type_id:-}" ]]; then
              echo "❌ Device type '${dev_name}' not found."
              xcrun simctl list devicetypes
              exit 1
            fi
            echo "Device type id: ${type_id}"

            local sim_name="${dev_name} (CI ${GITHUB_RUN_ID}-${idx})"
            echo "==> Creating simulator '${sim_name}' with runtime ${runtime_id}"
            local udid
            udid=$(xcrun simctl create "${sim_name}" "${type_id}" "${runtime_id}")
            if [[ -z "${udid:-}" ]]; then
              echo "❌ Failed to create simulator for ${dev_name}"
              exit 1
            fi
            echo "UDID: ${udid}"

            echo "==> Booting ${dev_name}"
            xcrun simctl boot "${udid}" || true
            xcrun simctl bootstatus "${udid}" -b

            # export to job env for WDIO caps
            if [[ "$idx" == "1" ]]; then
              echo "IOS_UDID=${udid}" >> "$GITHUB_ENV"
            else
              echo "IOS_UDID_2=${udid}" >> "$GITHUB_ENV"
            fi
          }

          echo "==> Selecting iOS runtime (desired ${IOS_VERSION})"
          RUNTIME_ID=$(pick_runtime "${IOS_VERSION}")
          if [[ -z "${RUNTIME_ID:-}" ]]; then
            echo "❌ No iOS runtime found on this runner."
            exit 1
          fi
          echo "Using runtime: ${RUNTIME_ID}"

          create_and_boot "${IOS_DEVICE}"   "${RUNTIME_ID}" 1
          create_and_boot "${IOS_DEVICE_2}" "${RUNTIME_ID}" 2

          echo "✅ Both simulators are ready."
          xcrun simctl list devices | sed -n '1,200p' || true

      # Appium server is started by the WDIO Appium service in your config
      - name: Run WDIO (smoke on PRs; full fallback)
        run: npm run test:ios:ci

      - name: Generate Allure HTML (always)
        if: always()
        run: npm run allure:generate

      - name: Upload Allure results (raw)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ github.run_id }}
          path: allure-results
          if-no-files-found: ignore

      - name: Upload Allure report (HTML)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ github.run_id }}
          path: allure-report
          if-no-files-found: ignore

      - name: Upload logs & screenshots/videos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ github.run_id }}
          path: |
            logs
            artifacts
          if-no-files-found: ignore

name: Mobile Automation CI (Self-Hosted iOS 18)

on:
  pull_request:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IOS_DEVICE: "iPhone 16 Pro"
  IOS_DEVICE_2: "iPhone 16 Plus"
  IOS_VERSION: "18"
  IOS_APP: "./apps/UIKitCatalog-iphonesimulator.app"
  NODE_OPTIONS: "--max-old-space-size=4096"
  MAX_INSTANCES: "2"
  WDA_PORT_1: "8100"
  WDA_PORT_2: "8101"
  WK_PROXY_PORT_1: "27753"
  WK_PROXY_PORT_2: "27754"

jobs:
  ios-tests:
    name: iOS • WDIO + Appium + Allure (Self-Hosted)
    runs-on: [self-hosted, macOS, Xcode16, iOS18]   # ← match your runner labels
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode
        shell: bash
        run: |
          set -euo pipefail
          sudo xcode-select -s "/Applications/Xcode.app/Contents/Developer"
          xcodebuild -version
          echo "DEVELOPER_DIR=/Applications/Xcode.app/Contents/Developer" >> "$GITHUB_ENV"

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      # ────────────────────────────────────────────────────────────────────────────
      # BOOT SIMULATORS (write UDIDs to separate files; DO NOT TOUCH $GITHUB_ENV)
      # ────────────────────────────────────────────────────────────────────────────
      - name: Boot Simulators (safe)
        id: boot
        shell: bash
        run: |
          set -euo pipefail

          # Pick iOS 18 runtime (visible on your machine)
          RUNTIME_ID="$(xcrun simctl list runtimes | awk '/iOS 18/ && $0 !~ /unavailable/ {gsub(/[()]/,""); print $NF}' | head -n1)"
          if [[ -z "$RUNTIME_ID" ]]; then
            echo "❌ No iOS 18 runtime visible"; exit 1
          fi

          # Resolve device type identifiers
          resolve() { xcrun simctl list devicetypes | grep -m1 -F "$1" | sed -n 's/.*(\(com.apple[^)]*\)).*/\1/p'; }
          TYPE1="$(resolve "$IOS_DEVICE")"
          TYPE2="$(resolve "$IOS_DEVICE_2")"
          if [[ -z "$TYPE1" || -z "$TYPE2" ]]; then
            echo "❌ Could not resolve device types"; exit 1
          fi

          # Best-effort cleanup (stale CI sims)
          xcrun simctl delete unavailable || true
          for n in CI-DEVICE-1 CI-DEVICE-2; do
            xcrun simctl list devices | awk -v p="$n" -F '[()]' '$0 ~ p {print $2}' | while read -r d; do
              [[ -n "$d" ]] && xcrun simctl delete "$d" || true
            done
          done

          # Create & boot; print only the UDID
          create_boot() {
            local name="$1" type="$2"
            local out udid
            out="$(xcrun simctl create "$name" "$type" "$RUNTIME_ID" 2>&1 || true)"
            udid="$(echo "$out" | grep -Eo '[0-9A-F-]{36}' | head -n1 || true)"
            if [[ -z "$udid" ]]; then
              echo "❌ Failed to create simulator for $name"; echo "$out"; exit 1
            fi
            xcrun simctl boot "$udid" || true
            xcrun simctl bootstatus "$udid" -b
            printf '%s\n' "$udid"
          }

          UDID1="$(create_boot "CI-DEVICE-1-$GITHUB_RUN_ID" "$TYPE1")"
          UDID2="$(create_boot "CI-DEVICE-2-$GITHUB_RUN_ID" "$TYPE2")"

          # WRITE ONLY RAW UDIDs TO SEPARATE FILES (NO LABELS/LOGS/PARENS)
          printf '%s\n' "$UDID1" > udid1.txt
          printf '%s\n' "$UDID2" > udid2.txt

      # ────────────────────────────────────────────────────────────────────────────
      # EXPORT TO ENV (separate step; append clean KEY=VALUE lines only)
      # ────────────────────────────────────────────────────────────────────────────
      - name: Export UDIDs to ENV (clean)
        shell: bash
        run: |
          set -euo pipefail
          read -r UDID1 < udid1.txt
          read -r UDID2 < udid2.txt

          # Validate UUID format
          echo "$UDID1" | grep -Eq '^[0-9A-F-]{36}$' || { echo "❌ UDID1 invalid: $UDID1"; exit 1; }
          echo "$UDID2" | grep -Eq '^[0-9A-F-]{36}$' || { echo "❌ UDID2 invalid: $UDID2"; exit 1; }

          {
            printf 'IOS_UDID=%s\n' "$UDID1"
            printf 'IOS_UDID_2=%s\n' "$UDID2"
          } >> "$GITHUB_ENV"

      - name: Run WDIO Tests
        run: npm run test:ios:ci

      - name: Generate Allure HTML
        if: always()
        run: npm run allure:generate

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ github.run_id }}
          path: allure-results

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ github.run_id }}
          path: allure-report

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ github.run_id }}
          path: |
            logs
            artifacts

name: Mobile Automation CI

on:
  pull_request:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IOS_DEVICE: "iPhone 16 Pro"
  IOS_DEVICE_2: "iPhone 16 Plus"
  IOS_VERSION: "18"                       # any 18.x
  IOS_APP: "./apps/UIKitCatalog-iphonesimulator.app"
  NODE_OPTIONS: "--max-old-space-size=4096"
  MAX_INSTANCES: "2"
  WDA_PORT_1: "8100"
  WDA_PORT_2: "8101"
  WK_PROXY_PORT_1: "27753"
  WK_PROXY_PORT_2: "27754"

jobs:
  ios-tests:
    name: iOS • WDIO + Appium + Allure (2 sims)
    runs-on: macos-15
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16.1
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'

      # Make the selection active, init components, and EXPORT DEVELOPER_DIR for later steps
      - name: Verify Xcode & install components
        shell: bash
        run: |
          set -euo pipefail
          DEV_DIR="${DEVELOPER_DIR:-$(xcode-select -p || true)}"
          if [[ -z "${DEV_DIR}" || ! -d "${DEV_DIR}" ]]; then
            echo "❌ No DEVELOPER_DIR; probing /Applications…"
            for X in /Applications/Xcode_*.app /Applications/Xcode.app; do
              [[ -d "$X/Contents/Developer" ]] || continue
              sudo xcode-select -s "$X/Contents/Developer"
              DEV_DIR="$X/Contents/Developer"
              break
            done
          fi
          echo "Using DEVELOPER_DIR=${DEV_DIR}"
          sudo xcode-select -s "${DEV_DIR}"
          xcodebuild -version
          sudo xcodebuild -runFirstLaunch || true

          echo "DEVELOPER_DIR=${DEV_DIR}" >> "$GITHUB_ENV"

          echo "== RUNTIMES AFTER SELECTION =="
          xcrun simctl list runtimes || true

      - name: Use Node.js 20 (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Show Xcode & available simulators
        run: |
          echo "DEVELOPER_DIR=${DEVELOPER_DIR:-$(xcode-select -p || true)}"
          xcodebuild -version
          xcrun simctl list devicetypes
          xcrun simctl list runtimes || true
          xcrun simctl list devices available || true

      - name: Boot 2 Simulators ($IOS_DEVICE / $IOS_DEVICE_2 @ $IOS_VERSION)
        shell: bash
        run: |
          set -euo pipefail

          # Re-select Xcode in THIS shell to avoid env drift
          DEV_DIR="${DEVELOPER_DIR:-$(xcode-select -p || true)}"
          if [[ -n "${DEV_DIR}" && -d "${DEV_DIR}" ]]; then
            sudo xcode-select -s "${DEV_DIR}"
          fi
          echo "Active DEVELOPER_DIR: $(xcode-select -p)"
          xcodebuild -version

          list_ios_runtime_ids () {
            # 1) From simctl
            xcrun simctl list runtimes | awk '/iOS/ && /Available|available/ { gsub(/[()]/,""); print $NF }' || true
            # 2) From .simruntime bundles as fallback
            for B in /Library/Developer/CoreSimulator/Profiles/Runtimes/iOS*.simruntime; do
              [[ -d "$B" ]] || continue
              BID=$(defaults read "$B/Contents/Info" CFBundleIdentifier 2>/dev/null || true)
              if [[ -n "${BID}" ]]; then echo "${BID}"; fi
            done
          }

          pick_runtime () {
            local desired_major="$1"   # e.g. "18"
            local ids
            mapfile -t ids < <(list_ios_runtime_ids)
            if [[ "${#ids[@]}" -eq 0 ]]; then
              echo ""
              return 0
            fi
            # prefer exact major first (e.g., iOS-18-*)
            for id in "${ids[@]}"; do
              if [[ "$id" =~ iOS-${desired_major}($|-).* ]]; then
                echo "$id"; return 0
              fi
            done
            # else return the latest one (last)
            echo "${ids[-1]}"
          }

          resolve_type () {
            local name="$1"
            xcrun simctl list devicetypes | awk -F '[()]' -v n="$name" '$1 ~ ("^" n "$") {print $2; exit}'
          }

          create_and_boot () {
            local dev_name="$1"
            local runtime_id="$2"
            local idx="$3"

            echo "==> Resolving type for '${dev_name}'"
            local type_id
            type_id=$(resolve_type "$dev_name")
            if [[ -z "${type_id:-}" ]]; then
              echo "❌ Device type '${dev_name}' not found."
              xcrun simctl list devicetypes
              exit 1
            fi
            echo "Device type id: ${type_id}"

            local sim_name="${dev_name} (CI ${GITHUB_RUN_ID}-${idx})"
            echo "==> Creating simulator '${sim_name}' with runtime ${runtime_id}"
            local udid
            udid=$(xcrun simctl create "${sim_name}" "${type_id}" "${runtime_id}")
            if [[ -z "${udid:-}" ]]; then
              echo "❌ Failed to create simulator for ${dev_name}"
              exit 1
            fi
            echo "UDID: ${udid}"

            echo "==> Booting ${dev_name}"
            xcrun simctl boot "${udid}" || true
            xcrun simctl bootstatus "${udid}" -b

            if [[ "$idx" == "1" ]]; then
              echo "IOS_UDID=${udid}" >> "$GITHUB_ENV"
            else
              echo "IOS_UDID_2=${udid}" >> "$GITHUB_ENV"
            fi
          }

          echo "==> Selecting iOS runtime (desired major ${IOS_VERSION})"
          RUNTIME_ID=$(pick_runtime "${IOS_VERSION}")
          if [[ -z "${RUNTIME_ID:-}" ]]; then
            echo "❌ No iOS runtime found on this runner (simctl and .simruntime scan empty)."
            echo "Contents of /Library/Developer/CoreSimulator/Profiles/Runtimes:"
            ls -la /Library/Developer/CoreSimulator/Profiles/Runtimes || true
            exit 1
          fi
          echo "Using runtime: ${RUNTIME_ID}"

          create_and_boot "${IOS_DEVICE}"   "${RUNTIME_ID}" 1
          create_and_boot "${IOS_DEVICE_2}" "${RUNTIME_ID}" 2

          echo "✅ Both simulators are ready."
          xcrun simctl list devices | sed -n '1,200p' || true

      - name: Run WDIO (smoke on PRs; full fallback)
        run: npm run test:ios:ci

      - name: Generate Allure HTML (always)
        if: always()
        run: npm run allure:generate

      - name: Upload Allure results (raw)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ github.run_id }}
          path: allure-results
          if-no-files-found: ignore

      - name: Upload Allure report (HTML)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ github.run_id }}
          path: allure-report
          if-no-files-found: ignore

      - name: Upload logs & screenshots/videos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ github.run_id }}
          path: |
            logs
            artifacts
          if-no-files-found: ignore

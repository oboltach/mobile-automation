name: Mobile Automation CI (Self-Hosted iOS 18)

on:
  pull_request:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IOS_DEVICE: "iPhone 16 Pro"
  IOS_DEVICE_2: "iPhone 16 Plus"
  IOS_VERSION: "18"
  IOS_APP: "./apps/UIKitCatalog-iphonesimulator.app"
  NODE_OPTIONS: "--max-old-space-size=4096"
  MAX_INSTANCES: "2"
  WDA_PORT_1: "8100"
  WDA_PORT_2: "8101"
  WK_PROXY_PORT_1: "27753"
  WK_PROXY_PORT_2: "27754"

jobs:
  ios-tests:
    name: iOS • WDIO + Appium + Allure (Self-Hosted)
    runs-on: [self-hosted, macOS, Xcode16, iOS18]
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode (Fixed Path)
        shell: bash
        run: |
          set -euo pipefail
          DEV_DIR="/Applications/Xcode.app/Contents/Developer"
          sudo xcode-select -s "$DEV_DIR"
          xcodebuild -version
          echo "DEVELOPER_DIR=$DEV_DIR" >> "$GITHUB_ENV"

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Boot Simulators (Two Devices)
        shell: bash
        run: |
          set -euo pipefail

          # Re-Select Xcode for this shell
          DEV_DIR="${DEVELOPER_DIR:-$(xcode-select -p)}"
          sudo xcode-select -s "$DEV_DIR"

          # Detect iOS runtime (iOS-18-x)
          runtime=$(xcrun simctl list runtimes | awk '/iOS 18/ && $0 !~ /unavailable/ {gsub(/[()]/,""); print $NF}' | head -n1)
          if [[ -z "$runtime" ]]; then
            echo "❌ No iOS 18 runtime found"
            exit 1
          fi

          # Resolve Device Types
          resolve() { xcrun simctl list devicetypes | grep -m1 -F "$1" | sed -n 's/.*(\(com.apple.*\)).*/\1/p'; }
          type1=$(resolve "$IOS_DEVICE")
          type2=$(resolve "$IOS_DEVICE_2")
          if [[ -z "$type1" || -z "$type2" ]]; then
            echo "❌ Missing device types"
            exit 1
          fi

          # Create & Boot Function
          create_boot() {
            name="$1"
            type="$2"
            udid=$(xcrun simctl create "$name" "$type" "$runtime" 2>/dev/null | grep -Eo '[0-9A-F-]{36}' || true)
            xcrun simctl boot "$udid" || true
            xcrun simctl bootstatus "$udid" -b
            echo "$udid"
          }

          # Boot Devices
          UDID1=$(create_boot "CI-Device-1-$GITHUB_RUN_ID" "$type1")
          UDID2=$(create_boot "CI-Device-2-$GITHUB_RUN_ID" "$type2")

          # Export Environment (Clean Format)
          {
            echo "IOS_UDID=$UDID1"
            echo "IOS_UDID_2=$UDID2"
          } >> "$GITHUB_ENV"

      - name: Run WDIO Tests
        run: npm run test:ios:ci

      - name: Generate Allure HTML
        if: always()
        run: npm run allure:generate

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ github.run_id }}
          path: allure-results

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ github.run_id }}
          path: allure-report

      - name: Upload Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ github.run_id }}
          path: |
            logs
            artifacts

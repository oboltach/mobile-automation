name: Mobile Automation CI (Self-Hosted iOS 18)

on:
  pull_request:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IOS_DEVICE: "iPhone 16 Pro"
  IOS_DEVICE_2: "iPhone 16 Plus"
  IOS_VERSION: "18"                          # we'll use "${IOS_VERSION}.0"
  NODE_OPTIONS: "--max-old-space-size=4096"
  MAX_INSTANCES: "2"
  WDA_PORT_1: "8100"
  WDA_PORT_2: "8101"
  WK_PROXY_PORT_1: "27753"
  WK_PROXY_PORT_2: "27754"

jobs:
  ios-tests:
    name: iOS ‚Ä¢ WDIO + Appium + Allure (Self-Hosted)
    runs-on: [self-hosted, macOS]
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set writable temp/cache env
        shell: bash
        run: |
          set -euo pipefail
          echo "TMPDIR=$RUNNER_TEMP" >> "$GITHUB_ENV"
          echo "XDG_CACHE_HOME=$GITHUB_WORKSPACE/.cache" >> "$GITHUB_ENV"
          echo "npm_config_cache=$GITHUB_WORKSPACE/.npm" >> "$GITHUB_ENV"
          mkdir -p "$RUNNER_TEMP" "$GITHUB_WORKSPACE/.cache" "$GITHUB_WORKSPACE/.npm"
          chmod -R 777 "$RUNNER_TEMP" "$GITHUB_WORKSPACE/.cache" "$GITHUB_WORKSPACE/.npm"

      - name: Select Xcode (/Applications/Xcode.app)
        shell: bash
        run: |
          set -euo pipefail
          sudo xcode-select -s "/Applications/Xcode.app/Contents/Developer"
          xcodebuild -version
          sudo xcodebuild -license accept
          echo "DEVELOPER_DIR=/Applications/Xcode.app/Contents/Developer" >> "$GITHUB_ENV"

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install NPM dependencies (incl. Appium 3 locally)
        run: |
          npm ci --ignore-scripts
          # ensure appium 3 is present locally (if not already in package.json)
          npm i -D appium@^3

      - name: Install/Update Appium iOS driver
        shell: bash
        run: |
          set -euo pipefail
          npx appium driver install xcuitest || npx appium driver update xcuitest
          npx appium -v
          npx appium driver list --installed

      - name: Build UIKitCatalog (iOS Simulator)
        shell: bash
        run: |
          set -euo pipefail
          PROJ="node_modules/ios-uicatalog/UIKitCatalog/UIKitCatalog.xcodeproj"
          SCHEME="UIKitCatalog"
          DERIVED="$PWD/build-uicatalog"
          DEST_OS="${IOS_VERSION}.0"

          xcodebuild \
            -project "$PROJ" \
            -scheme "$SCHEME" \
            -configuration Release \
            -sdk iphonesimulator \
            -destination "platform=iOS Simulator,name=${IOS_DEVICE},OS=${DEST_OS}" \
            -derivedDataPath "$DERIVED" \
            build

          PRODUCTS="$DERIVED/Build/Products/Release-iphonesimulator"
          APP_PATH="$(find "$PRODUCTS" -maxdepth 1 -type d -name 'UIKitCatalog*.app' | head -n1 || true)"
          if [[ -z "${APP_PATH:-}" || ! -d "$APP_PATH" ]]; then
            echo "‚ùå Could not locate built app under: $PRODUCTS"
            ls -la "$PRODUCTS" || true
            exit 1
          fi
          echo "‚úÖ Built app: $APP_PATH"
          echo "IOS_APP=$APP_PATH" >> "$GITHUB_ENV"

      # Create and boot two clean iOS 18 simulators, export UDIDs
      - name: Create & Boot Simulators
        id: sims
        shell: bash
        run: |
          set -euo pipefail
          RUNTIME_ID="$(xcrun simctl list runtimes | awk '/iOS '"$IOS_VERSION"'/ && $0 !~ /unavailable/ {gsub(/[()]/,""); print $NF}' | head -n1)"
          if [[ -z "$RUNTIME_ID" ]]; then
            echo "‚ùå No iOS $IOS_VERSION runtime visible"; xcrun simctl list runtimes; exit 1
          fi

          # Resolve device type identifiers
          resolve_type() { xcrun simctl list devicetypes | grep -m1 -F "$1" | sed -n 's/.*(\(com.apple[^)]*\)).*/\1/p'; }
          TYPE1="$(resolve_type "$IOS_DEVICE")"
          TYPE2="$(resolve_type "$IOS_DEVICE_2")"
          if [[ -z "$TYPE1" || -z "$TYPE2" ]]; then
            echo "‚ùå Could not resolve device types for '$IOS_DEVICE' or '$IOS_DEVICE_2'"; xcrun simctl list devicetypes; exit 1
          fi

          NAME1="CI-DEVICE-1-${GITHUB_RUN_ID}"
          NAME2="CI-DEVICE-2-${GITHUB_RUN_ID}"

          # Best-effort cleanup of previous devices with the same names
          for n in "$NAME1" "$NAME2"; do
            xcrun simctl list devices | awk -v p="$n" -F '[()]' '$0 ~ p {print $2}' | xargs -I{} xcrun simctl delete {} || true
          done
          xcrun simctl delete unavailable || true

          # Create devices and capture UDIDs
          create_only() {
            local name="$1" type="$2"
            local out udid
            out="$(xcrun simctl create "$name" "$type" "$RUNTIME_ID" 2>&1 || true)"
            udid="$(echo "$out" | grep -Eo '[0-9A-F-]{36}' | head -n1 || true)"
            if [[ -z "$udid" ]]; then
              echo "‚ùå Failed to create simulator $name"; echo "$out"; exit 1
            fi
            printf '%s\n' "$udid"
          }
          UDID1="$(create_only "$NAME1" "$TYPE1")"
          UDID2="$(create_only "$NAME2" "$TYPE2")"

          # Boot and wait
          xcrun simctl boot "$UDID1" >/dev/null 2>&1 || true
          xcrun simctl boot "$UDID2" >/dev/null 2>&1 || true
          xcrun simctl bootstatus "$UDID1" -b >/dev/null 2>&1
          xcrun simctl bootstatus "$UDID2" -b >/dev/null 2>&1

          echo "IOS_UDID=$UDID1" >> "$GITHUB_ENV"
          echo "IOS_UDID_2=$UDID2" >> "$GITHUB_ENV"

      - name: Prepare writable temp/cache dirs
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$TMPDIR" "$XDG_CACHE_HOME" "$npm_config_cache"
          chmod -R 777 "$TMPDIR" "$XDG_CACHE_HOME" "$npm_config_cache"
          echo "Using TMPDIR=$TMPDIR"
          echo "Using XDG_CACHE_HOME=$XDG_CACHE_HOME"

      - name: Prebuild WebDriverAgent for each simulator
        shell: bash
        run: |
          set -euo pipefail
          export DEVELOPER_DIR="/Applications/Xcode.app/Contents/Developer"

          # WDA from the Appium XCUITest driver store (Appium 3 layout)
          WDA_PROJECT="${APPIUM_HOME:-$HOME/.appium}/xcuitest-driver/WebDriverAgent/WebDriverAgent.xcodeproj"

          if [[ ! -f "$WDA_PROJECT" ]]; then
            echo "‚ùå WDA project not found at $WDA_PROJECT"
            echo "Installed drivers:"; npx appium driver list --installed
            exit 1
          fi

          WDA_DERIVED_1="$XDG_CACHE_HOME/wda-${WDA_PORT_1:-8100}"
          WDA_DERIVED_2="$XDG_CACHE_HOME/wda-${WDA_PORT_2:-8101}"
          mkdir -p "$WDA_DERIVED_1" "$WDA_DERIVED_2"

          echo "üî® Building WDA for device 1 ($IOS_UDID) ‚Üí $WDA_DERIVED_1"
          xcodebuild \
            -project "$WDA_PROJECT" \
            -scheme WebDriverAgentRunner \
            -destination "id=$IOS_UDID" \
            -configuration Debug \
            -derivedDataPath "$WDA_DERIVED_1" \
            CODE_SIGNING_ALLOWED=NO \
            build-for-testing

          echo "üî® Building WDA for device 2 ($IOS_UDID_2) ‚Üí $WDA_DERIVED_2"
          xcodebuild \
            -project "$WDA_PROJECT" \
            -scheme WebDriverAgentRunner \
            -destination "id=$IOS_UDID_2" \
            -configuration Debug \
            -derivedDataPath "$WDA_DERIVED_2" \
            CODE_SIGNING_ALLOWED=NO \
            build-for-testing

      - name: Run WDIO Tests
        run: npm run test:ios:ci

      - name: Generate Allure HTML
        if: always()
        run: npm run allure:generate

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ github.run_id }}
          path: allure-results
          if-no-files-found: ignore

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ github.run_id }}
          path: allure-report
          if-no-files-found: ignore

      - name: Upload Logs/Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ github.run_id }}
          path: |
            logs
            artifacts
          if-no-files-found: ignore

      - name: Delete CI Simulators (cleanup)
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          for n in "CI-DEVICE-1-${GITHUB_RUN_ID}" "CI-DEVICE-2-${GITHUB_RUN_ID}"; do
            xcrun simctl list devices | awk -v p="$n" -F '[()]' '$0 ~ p {print $2}' | while read -r d; do
              [[ -n "$d" ]] && xcrun simctl shutdown "$d" || true
              [[ -n "$d" ]] && xcrun simctl delete "$d" || true
            done
          done
          xcrun simctl delete unavailable || true

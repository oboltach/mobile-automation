name: Mobile Automation CI

on:
  pull_request:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Exact device names available on Xcode 16 images
  IOS_DEVICE: "iPhone 16 Pro"
  IOS_DEVICE_2: "iPhone 16 Plus"
  IOS_VERSION: "18"                        # major version; script picks a matching installed runtime
  IOS_APP: "./apps/UIKitCatalog-iphonesimulator.app"
  NODE_OPTIONS: "--max-old-space-size=4096"
  MAX_INSTANCES: "2"                        # WDIO runs both caps concurrently
  # Distinct per-device ports (match your wdio.conf.js)
  WDA_PORT_1: "8100"
  WDA_PORT_2: "8101"
  WK_PROXY_PORT_1: "27753"
  WK_PROXY_PORT_2: "27754"

jobs:
  ios-tests:
    name: iOS • WDIO + Appium + Allure (2 sims, self-hosted)
    # Adjust labels to match your runner (e.g., [self-hosted, macOS, X64])
    runs-on: [self-hosted, macOS]
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # If your Xcode is not the system default, point xcode-select to Xcode 16.1
      - name: Ensure Xcode 16.1 is active
        shell: bash
        run: |
          set -euo pipefail
          # Change this path if your Xcode is elsewhere (e.g., /Applications/Xcode_16.1.app)
          DEV_DIR="/Applications/Xcode.app/Contents/Developer"
          if [[ ! -d "$DEV_DIR" ]]; then
            echo "❌ Xcode dev dir not found at $DEV_DIR"; exit 1
          fi
          sudo xcode-select -s "$DEV_DIR"
          xcodebuild -version
          # Initialize components if needed
          sudo xcodebuild -runFirstLaunch || true

      - name: Use Node.js 20 (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Show Xcode & available simulators
        shell: bash
        run: |
          xcodebuild -version
          echo "== Device Types =="
          xcrun simctl list devicetypes
          echo "== Runtimes =="
          xcrun simctl list runtimes
          echo "== Devices (available) =="
          xcrun simctl list devices available

      - name: Boot 2 Simulators ($IOS_DEVICE / $IOS_DEVICE_2 @ iOS $IOS_VERSION)
        shell: bash
        run: |
          set -euo pipefail

          list_ios_runtime_ids () {
            # 1) via simctl
            xcrun simctl list runtimes | awk '/iOS/ && /Available|available/ { gsub(/[()]/,""); print $NF }' || true
            # 2) fallback: scan installed .simruntime bundles
            for B in /Library/Developer/CoreSimulator/Profiles/Runtimes/iOS*.simruntime; do
              [[ -d "$B" ]] || continue
              defaults read "$B/Contents/Info" CFBundleIdentifier 2>/dev/null || true
            done
          }

          pick_runtime () {
            desired_major="$1"   # e.g. "18"
            ids="$(list_ios_runtime_ids)"
            if [[ -z "${ids}" ]]; then
              echo ""
              return 0
            fi
            match="$(echo "${ids}" | grep -E "iOS-${desired_major}($|-)" | head -n 1 || true)"
            if [[ -n "${match}" ]]; then
              echo "${match}"
              return 0
            fi
            echo "${ids}" | tail -n 1
          }

          resolve_type () {
            name="$1"
            xcrun simctl list devicetypes | awk -F '[()]' -v n="$name" '$1 ~ ("^" n "$") {print $2; exit}'
          }

          echo "==> Selecting iOS runtime (desired major ${IOS_VERSION})"
          RUNTIME_ID="$(pick_runtime "${IOS_VERSION}")"
          if [[ -z "${RUNTIME_ID}" ]]; then
            echo "❌ No iOS runtime found. Ensure iOS ${IOS_VERSION}.x simulator runtime is installed in Xcode → Settings → Platforms."
            exit 1
          fi
          echo "Using runtime: ${RUNTIME_ID}"

          create_and_boot () {
            dev_name="$1"
            idx="$2"

            echo "==> Resolving type for '${dev_name}'"
            TYPE_ID="$(resolve_type "${dev_name}")"
            if [[ -z "${TYPE_ID}" ]]; then
              echo "❌ Device type '${dev_name}' not found on this machine."
              xcrun simctl list devicetypes
              exit 1
            fi
            echo "Device type id: ${TYPE_ID}"

            SIM_NAME="${dev_name} (CI ${GITHUB_RUN_ID}-${idx})"
            echo "==> Creating simulator '${SIM_NAME}' with runtime ${RUNTIME_ID}"
            UDID="$(xcrun simctl create "${SIM_NAME}" "${TYPE_ID}" "${RUNTIME_ID}")"
            if [[ -z "${UDID}" ]]; then
              echo "❌ Failed to create simulator."
              exit 1
            fi
            echo "UDID: ${UDID}"

            echo "==> Booting and waiting"
            xcrun simctl boot "${UDID}" || true
            xcrun simctl bootstatus "${UDID}" -b
            echo "${UDID}"
          }

          UDID1="$(create_and_boot "${IOS_DEVICE}" 1)"
          UDID2="$(create_and_boot "${IOS_DEVICE_2}" 2)"

          echo "IOS_UDID=${UDID1}"   >> "$GITHUB_ENV"
          echo "IOS_UDID_2=${UDID2}" >> "$GITHUB_ENV"

          echo "✅ Both simulators are ready."
          xcrun simctl list devices | sed -n '1,200p' || true

      # Appium server is started by the WDIO Appium service in your config
      - name: Run WDIO (smoke on PRs; full fallback)
        run: npm run test:ios:ci

      - name: Generate Allure HTML (always)
        if: always()
        run: npm run allure:generate

      - name: Upload Allure results (raw)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ github.run_id }}
          path: allure-results
          if-no-files-found: ignore

      - name: Upload Allure report (HTML)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ github.run_id }}
          path: allure-report
          if-no-files-found: ignore

      - name: Upload logs & screenshots/videos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ github.run_id }}
          path: |
            logs
            artifacts
          if-no-files-found: ignore
